<?xml version="1.0"?>

<document>

  <properties>
    <title>classworlds</title>
    <author email="bob@werken.com">bob mcwhirter</author>
  </properties>

  <body>

  <section name="Overview">

    <p>
    <code>classworlds</code> is a framework for container developers
    who require complex manipulation of Java's ClassLoaders.  Java's
    native <code>ClassLoader</code> mechanims and classes can cause
    much headache and confusion for certain types of application
    developers.  Projects which involve dynamic loading of components
    or otherwise represent a 'container' can benefit from the classloading
    control provided by <code>classworlds</code>.  
    </p>

    <p>
    <code>classworlds</code> provides a richer set of semantics for
    class loading than Java's normal mechanisms, while still being
    able to provide a <code>ClassLoader</code> interface to integrate
    seamlessly with the Java environment.
    </p>

    <p>
    The <code>classworlds</code> model does away with the hierarchy
    normally associated with ClassLoaders.  Instead, there is a
    pool of <a href="apidocs/com/codehaus/classworlds/ClassRealm.html">ClassRealms</a>
    which can import arbitrary packages from other ClassRealms.
    Effectively, <code>classworlds</code> turns the old-style
    hierarchy into a directed graph.
    </p>

    <p>
    In a application container environment, the container may
    have a realm capable of loading on the container/component
    contract interfaces and classes.  Another realm is created
    for each component which imports the contract classes from
    the container realm.
    </p>

    <p>
    This model allows for fine-grained control of which 
    classloader loads any particular class.  This form of
    partial isolation can reduce the myriad strange errors
    that are produced by loading classes from multiple
    loaders.
    </p>

  </section>

</body>
</document>

